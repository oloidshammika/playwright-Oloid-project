name: Playwright Tests - Ortoni Report Deployment (Restored SQLite Fix)

on:
  push:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      # --- 1. Checkout & Setup ---
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      # --- 2. Run Playwright Tests to Generate Ortoni Artifact ---
      - name: Run Playwright tests
        run: npx playwright test Oloid_test/Oloid_admin_full_journey_test.spec.ts || true

      # --- 3. Upload Ortoni artifact (contains SQLite & attachments) ---
      - name: Upload Ortoni Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ortoni-report-artifact
          path: |
            ortoni-data
            ortoni-data-history.sqlite
          if-no-files-found: warn
          compression-level: 6

      # --- 4. Install Ortoni CLI ---
      - name: Install Ortoni CLI
        run: npm install ortoni-report

      # --- 5. Download the Ortoni artifact ---
      - name: Download Ortoni Artifact
        uses: actions/download-artifact@v4
        with:
          name: ortoni-report-artifact
          path: /tmp/ortoni-download

      # --- 6. Generate Ortoni HTML Report from SQLite ---
      - name: Generate Ortoni HTML Report
        run: |
          set -e
          DOWNLOAD_DIR="/tmp/ortoni-download"
          DB_FILE="$DOWNLOAD_DIR/ortoni-data-history.sqlite"
          DATA_FOLDER="$DOWNLOAD_DIR/ortoni-data"
          DEPLOY_DIR="$GITHUB_WORKSPACE/ortoni-report"

          echo "üì¶ Listing artifact files:"
          ls -R "$DOWNLOAD_DIR" || true

          mkdir -p "$DEPLOY_DIR"

          if [ ! -f "$DB_FILE" ]; then
            echo "‚ùå No SQLite file found. Creating fallback report."
            echo "<html><body><h2>No report generated.</h2><p>SQLite file missing or test failed early.</p></body></html>" > "$DEPLOY_DIR/ortoni-report.html"
          else
            echo "‚úÖ SQLite found. Generating Ortoni HTML report..."
            cp "$DB_FILE" "$DEPLOY_DIR/"
            cp -r "$DATA_FOLDER" "$DEPLOY_DIR/" || true
            npx ortoni-report show-report --dir "$DEPLOY_DIR" --file ortoni-report.html --title "Playwright Oloid Test Report" --port 3000 || echo "‚ö†Ô∏è Ortoni CLI failed."
          fi

          # Ensure index.html exists for GitHub Pages
          cp "$DEPLOY_DIR/ortoni-report.html" "$DEPLOY_DIR/index.html"
          echo "‚úÖ Report prepared successfully."

      # --- 7. Deploy to GitHub Pages ---
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v5

      - name: Upload report folder
        uses: actions/upload-pages-artifact@v3
        with:
          path: ortoni-report

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # --- 8. Add summary badge ---
      - name: Add ‚ÄúOpen Report‚Äù badge to GitHub summary
        if: always()
        run: |
          {
            echo "### ‚úÖ Ortoni Test Report Deployed"
            echo ""
            echo "<p align='center'>"
            echo "  <a href='https://oloidshammika.github.io/playwright-Oloid-project/' target='_blank'>"
            echo "    <img src='https://img.shields.io/badge/üìä_Open%20Ortoni%20Report-blue?style=for-the-badge' alt='Open Report' />"
            echo "  </a>"
            echo "</p>"
            echo ""
            echo "**üìÖ Date:** $(date)"
          } >> $GITHUB_STEP_SUMMARY
