name: Playwright Tests - Oloid Folder with Ortoni Report
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

# Permissions are critical for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests for Oloid_test folder
        # Runs the tests and generates the ortoni-data-history.sqlite file
        run: npx playwright test Oloid_test
        continue-on-error: true

      - name: Upload Ortoni Report Artifact
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: ortoni-report-artifact
          path: ortoni-report/ # Uploads the contents of the ortoni-report folder
          if-no-files-found: warn
          compression-level: 6

      - name: Archive Playwright Test Results
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: playwright-test-results
          path: playwright-report/

  deploy-report:
    needs: test
    runs-on: ubuntu-latest
    # Required for GitHub Pages URL visibility
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Ortoni CLI
        # Installs the correct package 'ortoni-report' (not ortoni-report-cli)
        run: npm install ortoni-report

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Download Ortoni Report Artifact
        # Downloads the artifact contents to a temporary path
        uses: actions/download-artifact@v4
        with:
          name: ortoni-report-artifact
          path: /tmp/ortoni-download

      # âœ… FINAL FIX: Uses $GITHUB_WORKSPACE and corrects the nested artifact path structure.
      - name: Generate HTML Report from SQLite Data
        run: |
          # 1. Define paths relative to the $GITHUB_WORKSPACE environment variable for reliability.
          DEPLOY_DIR="$GITHUB_WORKSPACE/ortoni-report"

          # FIX: The downloaded artifact created a nested folder named 'ortoni-report' inside /tmp/ortoni-download
          DOWNLOAD_DIR="/tmp/ortoni-download/ortoni-report" 
          DB_FILE="$DOWNLOAD_DIR/ortoni-data-history.sqlite"

          # 2. Ensure the target deployment directory exists
          mkdir -p "$DEPLOY_DIR"

          # 3. Copy the database file from the correct downloaded artifact location 
          cp "$DB_FILE" "$DEPLOY_DIR/"

          # 4. Run the generator from the deployment folder.
          # The CLI will find the copied .sqlite file and generate ortoni-report.html.
          npx ortoni-report show-report --dir "$DEPLOY_DIR" --file ortoni-report.html --port 3000

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ortoni-report/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
