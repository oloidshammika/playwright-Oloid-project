name: Playwright Tests - Oloid Folder with Ortoni Report
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

# CRITICAL: Permissions must be set for GitHub Pages deployment
permissions:
  contents: read
  pages: write # Allows the deployment to GitHub Pages
  id-token: write # Required for secure deployment authentication

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/ # Ensures a stable Node.js version
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests for Oloid_test folder
        # Tests run, generating ortoni-data-history.sqlite
        run: npx playwright test Oloid_test
        continue-on-error: true # Essential to allow report generation steps to run after failure

      # Upload 1: The Ortoni Report Artifact (contains only the .sqlite data if tests failed)
      - name: Upload Ortoni Report Artifact
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: ortoni-report-artifact
          path: ortoni-report/
          if-no-files-found: warn
          compression-level: 6

      # Upload 2: The default Playwright HTML report (requires ["html"] in config)
      - name: Archive Playwright Test Results
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: playwright-test-results
          path: playwright-report/

  deploy-report:
    needs: test # Ensures deployment waits for the tests to finish
    runs-on: ubuntu-latest
    # This environment setup is key to displaying the final URL in the summary
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # FIX: Install Ortoni CLI to be able to generate the HTML report
      - name: Install Ortoni CLI
        run: npm install ortoni-report-cli

      # This step should now work if you have configured GitHub Pages to use GitHub Actions
      - name: Setup Pages
        uses: actions/configure-pages@v5

      # Download the report artifact (which currently only contains the .sqlite data)
      - name: Download Ortoni Report Artifact
        uses: actions/download-artifact@v4
        with:
          name: ortoni-report-artifact
          path: ortoni-report/

      # CRITICAL FIX: Force HTML Report Generation from the .sqlite data
      - name: Generate HTML Report from SQLite Data
        # The Ortoni CLI reads ortoni-data-history.sqlite and creates index.html in the same directory
        run: npx ortoni-report show-report --dir ./ortoni-report/ --file index.html
        working-directory: ${{ github.workspace }}

      # Upload the *complete* report directory (now including index.html) to the Pages staging area
      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ortoni-report/

      # Deploy the report to the live GitHub Pages URL
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
